2019-??-?? 3.0.0
  - Torrent.filetree now uses Torrent.File instances as leaf nodes instead of
    None.  Torrent.File is a namedtuple that provides the file name, path,
    directory and size.
  - Torrent.read("path/to/some.torrent").verify("path/to/content") checks if
    on-disk data is valid for a torrent file.
  - The class attributes Torrent.piece_size_min and Torrent.piece_size_max can
    now be used to quickly specify piece size limits.  Setting the piece_size
    property to an out-of-bounds piece size or returning one with
    Torrent.calculate_piece_size() will raise PieceSizeError.


2019-07-01 2.1.0
  - Keep piece size smaller for large torrents and use more pieces to
    compensate.
  - Implement your own piece size calculation of arbitrary complexity by simply
    overloading Torrent.calculate_piece_size().


2019-04-04 2.0.0
  - Use proper version number scheme
  - Raise PieceSizeError if 'piece_size' is set to a number that isn't a power
    of two


2018-06-25 1.5
  - New methods read_stream() and write_stream() to import/export a torrent from
    any file-like object


2018-06-15 1.4
  - New method: calculate_piece_size()
  - Piece size is now automatically calculated when path is set instead of
    calculating it on demand when requested
  - Setting piece size to a non-number now raises ValueError instead of
    RuntimeError
  - Exclude patterns are now matched against every part of a file's path, not
    just the last part (i.e. the file name)
  - Setting torrent.path to '.' or '..' now sets the correct name
  - Torrent instances are equal (==) if their metainfo is equal
  - Torrent instances are hashable
  - Torrent instances can be copied with the copy() method or the copy module
    from the standard library


2018-04-07 1.3
  - Fix 'filepaths' attribute when setting a custom name


2018-02-19 1.2
  - Don't leave an empty file when calling write() on an invalid torrent


2018-02-18 1.1
  - 'announce' in metainfo is now a single URL instead of the first tier (Marcin
    Kurczewski)


2018-02-01 1.0
  - Nothing changed except that this is now the final 1.0 version


2018-01-13 1.0rc5
  - Fixed a bug where overwriting a torrent file resulted in corrupt torrent
  - Added property 'pieces' that returns the number of pieces
  - Added property 'filetree' that can be used to create a beautiful tree of a
    torrent's content
  - Added property 'is_ready' that is True when torrent can be exported
  - When reading torrent files, don't read large files all the way to EOF before
    failing
  - All exceptions now have an 'errno' attribute (see 'errno' module)


2018-01-03 1.0rc4
  - Torrent.write() and Torrent.read() take a file path instead of an opened
    file object
  - Some exception names have changed
  - Allow reading arbitrary bencoded data with validation turned off
  - Default 'created_by' value is now 'torf/<version>'


2017-12-27 1.0rc3
  - Reduce entropy with 'randomize_infohash' enabled (some parsers seem to have
    issues with large integers)


2017-12-25 1.0rc2
  - Add 'randomize_infohash' as a Torrent argument
  - Add 'name' as a Torrent argument
  - Call generate() callback again when all pieces are hashed
  - Validate 'metainfo' when accessing 'infohash' property


2017-12-21 1.0rc1
  Initial release
